DROP TABLE SYS.ORDERS;
DROP TABLE SYS.CUSTOMER;

CREATE TABLE SYS.CUSTOMERS (
	CUSTOMER_ID NUMERIC(3),
    CUSTOMER_NAME VARCHAR(20),
    CUSTOMER_ADDRESS VARCHAR(100)
);

CREATE TABLE SYS.ORDERS (
  ORDER_DATE TIMESTAMP,
  CUSTOMER_ID NUMERIC(3, 0), -- ID
  AMOUNT NUMERIC(13, 2),
  MEMBERSHIP VARCHAR(1),
  ORDER_ID NUMERIC(3) -- ID
);

INSERT INTO SYS.CUSTOMERS (CUSTOMER_ID, CUSTOMER_NAME, CUSTOMER_ADDRESS) 
VALUES (101, 'TOMMY', 'DUMMY ADDRESS1');
INSERT INTO SYS.CUSTOMERS (CUSTOMER_ID, CUSTOMER_NAME, CUSTOMER_ADDRESS) 
VALUES (102, 'ALAN', 'DUMMY ADDRESS2');
INSERT INTO SYS.CUSTOMERS (CUSTOMER_ID, CUSTOMER_NAME, CUSTOMER_ADDRESS) 
VALUES (103, 'VANUS', 'DUMMY ADDRESS3');
SELECT * FROM SYS.CUSTOMERS;

INSERT INTO SYS.ORDERS (ORDER_DATE, CUSTOMER_ID, AMOUNT, MEMBERSHIP, ORDER_ID) 
VALUES (NOW(), 102, 10000, 'S', 201);
INSERT INTO SYS.ORDERS (ORDER_DATE, CUSTOMER_ID, AMOUNT, MEMBERSHIP, ORDER_ID) 
VALUES (NOW(), 102, 20000, 'S', 202);
INSERT INTO SYS.ORDERS (ORDER_DATE, CUSTOMER_ID, AMOUNT, MEMBERSHIP, ORDER_ID) 
VALUES (NOW(), 103, 40000, 'G', 203);
INSERT INTO SYS.ORDERS (ORDER_DATE, CUSTOMER_ID, AMOUNT, MEMBERSHIP, ORDER_ID) 
VALUES (NOW(), 100, 40000, 'G', 204);
SELECT * FROM SYS.ORDERS;

-- LEFT JOIN, CUSTOMERS IN LEFT, ORDERS IN RIGHT
SELECT *
FROM SYS.CUSTOMERS
LEFT JOIN SYS.ORDERS
ON ORDERS.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID;

-- RIGHT JOIN
SELECT *
FROM SYS.CUSTOMERS
RIGHT JOIN SYS.ORDERS
ON ORDERS.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID;

-- INNER JOIN
SELECT *
FROM SYS.CUSTOMERS
INNER JOIN SYS.ORDERS
ON ORDERS.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID;

-- INNER JOIN (ANOTHER APPROACH)
SELECT *
FROM SYS.CUSTOMERS, SYS.ORDERS
WHERE ORDERS.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID;

-- FULL OUTER JOIN
SELECT *
FROM SYS.CUSTOMERS
LEFT JOIN SYS.ORDERS
ON ORDERS.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID
UNION
SELECT *
FROM SYS.CUSTOMERS
RIGHT JOIN SYS.ORDERS
ON ORDERS.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID;


-- LEFT JOIN, AND ORDERS HAS NO LINKED RECORD
SELECT *
FROM SYS.CUSTOMERS
LEFT JOIN SYS.ORDERS
ON ORDERS.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID
WHERE ORDERS.CUSTOMER_ID IS NULL;

SELECT *
FROM SYS.CUSTOMERS
WHERE NOT EXISTS (SELECT 1
					FROM SYS.ORDERS 
					WHERE ORDERS.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID);

-- RIGHT JOIN, AND CUSTOMERS HAS NO LINKED RECORD
SELECT *
FROM SYS.CUSTOMERS
RIGHT JOIN SYS.ORDERS
ON ORDERS.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID
WHERE CUSTOMERS.CUSTOMER_ID IS NULL;

-- ALIASES
SELECT C.CUSTOMER_ID AS ID,
C.CUSTOMER_NAME AS NAME
FROM SYS.CUSTOMERS C
LEFT JOIN SYS.ORDERS O
ON O.CUSTOMER_ID = C.CUSTOMER_ID
ORDER BY C.CUSTOMER_ID DESC; -- DESCENDING ORDER


-- NULL
SELECT C.CUSTOMER_ID,
		CUSTOMER_NAME,
        CUSTOMER_ADDRESS,
        IFNULL(ORDER_DATE,'N/A') AS ORDER_DATE,
        IFNULL(AMOUNT,'N/A') AS AMOUNT,
        IFNULL(MEMBERSHIP,'N/A') AS MEMBERSHIP,
        IFNULL(ORDER_ID,'N/A') AS ORDER_ID
FROM SYS.ORDERS C RIGHT JOIN SYS.CUSTOMERS O
ON O.CUSTOMER_ID = C.CUSTOMER_ID;

-- OPERATORS + ||
SELECT CONCAT('FABCEAFDAS',' ABC') FROM DUAL;
SELECT CONCAT('FABCEAFDAS',' ABC'), CUSTOMER_NAME FROM SYS.CUSTOMERS;


-- EXISTS/ NOT EXISTS
SELECT *
FROM SYS.CUSTOMERS
WHERE NOT EXISTS (SELECT 1
					FROM SYS.ORDERS 
					WHERE ORDERS.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID);
-- MIN, MAX
SELECT * FROM SYS.CUSTOMERS C 
WHERE EXISTS (SELECT 1 FROM SYS.ORDERS O 
			  WHERE O.CUSTOMER_ID = C.CUSTOMER_ID
              AND O.AMOUNT = (SELECT MIN(AMOUNT) FROM SYS.ORDERS)
              );
              
-- BETWEEN
SELECT * 
FROM SYS.ORDERS 
WHERE ORDER_DATE BETWEEN '2022-11-08 00:00:00' AND '2022-11-08 23:59:59';

SELECT *
FROM SYS.CUSTOMERS
WHERE CUSTOMER_ID IN (102, 103); -- CUSTOMER_ID = 1O2 OR CUSTOMER_ID = 103

SELECT *
FROM SYS.ORDERS
WHERE AMOUNT >= 15000 AND AMOUNT < 30000;

-- LIKE
SELECT *
FROM SYS.CUSTOMERS
WHERE CUSTOMER_NAME LIKE 'V%' AND CUSTOMER_ADDRESS LIKE '%ADDRESS3';

SELECT * FROM SYS.CUSTOMERS;

-- UNION ALL/ UNION
CREATE TABLE CONSUMERS (
	CONSUMER_ID NUMERIC(3),
    CONSUMER_NAME VARCHAR(20),
    CONSUMER_ADDRESS VARCHAR(100)
);

INSERT INTO CONSUMERS (CONSUMER_ID, CONSUMER_NAME, CONSUMER_ADDRESS)
VALUES (101, 'TOMMY', 'DUMMY ADDRESS5');
INSERT INTO CONSUMERS (CONSUMER_ID, CONSUMER_NAME, CONSUMER_ADDRESS)
VALUES (104, 'VINCNET', 'DUMMY ADDRESS4');
SELECT * FROM SYS.CONSUMERS;

SELECT CUSTOMER_ID, CUSTOMER_NAME, 'CUSTOMER' AS TYPE
FROM SYS.CUSTOMERS
UNION
SELECT CONSUMER_ID, CONSUMER_NAME, 'CONSUMER' AS TYPE
FROM SYS.CONSUMERS



-- DROP COLUMN
ALTER TABLE CUSTOMERS DROP CUSTOMER_ADDRESS;
ALTER TABLE CUSTOMERS ADD CUSTOMER_ADDRESS VARCHAR(100);

-- RENAME TABLE
ALTER TABLE CUSTOMERS RENAME TO CUSTOMERS2; -- DDL
SELECT * FROM CUSTOMERS;

-- TRUNCATE OR DELETE ALL
DELETE FROM CUSTOMERS;
TRUNCATE CUSTOMERS;

-- This is store procedure, which need to be compiled to DBMS.
DELIMITER $$
DROP PROCEDURE IF EXISTS `sys`.`test` $$
CREATE PROCEDURE `sys`.`test` ()
BEGIN

  DECLARE FOO varchar(7);
  DECLARE oldFOO varchar(7);
  SET FOO = '138';
  SET oldFOO = CONCAT('0', FOO);

  update sys.customers
     set customer_address = FOO
   where customer_id = 101;

END $$
DELIMITER ;
-- call the store procedure
CALL sys.test();

-- lock table customer
lock tables sys.CUSTOMERS read;
-- cannot read CONSUMERS DUE TO CUSTOMER IS LOCKED FOR READ
select * from SYS.CONSUMERS;
-- READ CUSTOMER OK
select * from SYS.CUSTOMERS;
-- RELEASE THE TABLES
unlock tables;

-- YOU CAN TRY LOCK WRITE
lock tables sys.CUSTOMERS write;

-- create another user 
CREATE USER 'vincentlau'@'localhost' IDENTIFIED BY 'Prun1234.';
-- grant all privileges to the user
GRANT ALL PRIVILEGES ON SYS.CUSTOMERS TO 'vincentlau'@'localhost' ;
GRANT ALL PRIVILEGES ON SYS.CONSUMERS TO 'vincentlau'@'localhost' ;
-- drop user
DROP USER 'vincentlau'@'localhost';
